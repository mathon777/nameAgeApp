service: ${env:APP_NAME, 'name-age-app'}
useDotenv: true
plugins:
  - serverless-webpack
  - serverless-offline

package:
  individually: true

custom:
#  logRetentionInDays: 30
#  webpack:
#    webpackConfig: "webpack.config.js"
#    packager: "npm"
#    includeModules:
#      forceExclude:
#        - aws-sdk

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30
  httpApi:
    cors: true
  environment:
    SQS_USER_EVENT_QUEUE: { Ref: SQSUserEventQueue }
    AWS_LAMBDA_REGION: eu-central-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [ SQSUserEventQueue, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/users

resources:
  Resources:
    SQSUserEventQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: sqs-user-event-${opt:stage, self:provider.stage}.fifo
        FifoQueue: true
    UsersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "users"

functions:
  - ${file(src/lambdas/api/users/create/function.yml)}
  - ${file(src/lambdas/sqs/saveUser/function.yml)}

